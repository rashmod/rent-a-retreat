// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @default(uuid())
  firstName   String
  lastName    String
  gender      String
  email       String   @unique
  phoneNumber BigInt
  dateOfBirth DateTime

  profilePhoto ProfilePhoto?
  host         Host?
  guest        Guest?
}

model ProfilePhoto {
  profilePhotoId String @id @default(uuid())
  imgUrl         String

  user   User   @relation(fields: [userId], references: [userId])
  userId String @unique
}

model Host {
  hostId           String   @id @default(uuid())
  avgRating        Float
  totalRatingCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [userId])
  userId String @unique

  address          Address?
  emergencyContact EmergencyContact[]
  listing          Listing[]
}

model Guest {
  guestId          String   @id @default(uuid())
  avgRating        Float
  totalRatingCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [userId])
  userId      String        @unique
  reservation Reservation[]
}

model EmergencyContact {
  emergencyContactId String @id @default(uuid())
  firstName          String
  lastName           String
  email              String @unique
  phoneNumber        BigInt
  relationship       String

  host   Host   @relation(fields: [hostId], references: [hostId])
  hostId String
}

model Address {
  addressId   String @id @default(uuid())
  unitNumber  String
  streetName  String
  addressLine String
  city        String
  postalCode  String
  state       String
  country     String

  host   Host?   @relation(fields: [hostId], references: [hostId])
  hostId String? @unique

  listing   Listing? @relation(fields: [listingId], references: [listingId])
  listingId String?  @unique
}

model Listing {
  listingId        String @id @default(uuid())
  listingName      String
  bedroomCount     Int
  bathroomCount    Int
  pricePerNight    Int
  cleaningFee      Int
  maxGuest         Int
  avgRating        Float
  totalRatingCount Int

  isRefundable           Boolean
  percentRefundable      Int?
  daysBeforeCancellation Int?

  latitude  Decimal
  longitude Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address      Address?
  listingPhoto ListingPhoto[]
  houseRule    HouseRule[]
  category     Category[]
  amenity      Amenity[]
  host         Host           @relation(fields: [hostId], references: [hostId])
  hostId       String
  reservation  Reservation[]
}

model ListingPhoto {
  listingPhotoId String @id @default(uuid())
  photoUrl       String
  position       Int

  listing   Listing @relation(fields: [listingId], references: [listingId])
  listingId String
}

model HouseRule {
  houseRuleId     String @id @default(uuid())
  ruleTitle       String
  ruleDescription String

  listing Listing[]
}

model Category {
  categoryId          String @id @default(uuid())
  categoryTitle       String
  categoryDescription String

  listing Listing[]
}

model Amenity {
  amenityId          String @id @default(uuid())
  amenityTitle       String
  amenityDescription String

  listing Listing[]
}

model Reservation {
  reservationId    String    @id @default(uuid())
  bookingDate      DateTime  @default(now())
  checkInDate      DateTime
  checkOutDate     DateTime
  tax              Int
  totalCost        Int
  numOfGuests      Int
  isCancelled      Boolean
  refundAmount     Int?
  cancellationDate DateTime?

  guest     Guest   @relation(fields: [guestId], references: [guestId])
  guestId   String
  listing   Listing @relation(fields: [listingId], references: [listingId])
  listingId String
}
